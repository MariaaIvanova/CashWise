import React, { useState, useEffect, useRef } from 'react';
import { View, StyleSheet, ScrollView, TouchableOpacity, Alert, ActivityIndicator, Animated, Dimensions } from 'react-native';
import { Text, Button, Surface, ProgressBar, IconButton, Badge, useTheme } from 'react-native-paper';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { useTheme as useCustomTheme, THEME } from '../ThemeContext';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RouteProp } from '@react-navigation/native';
import { auth, database, supabase } from '../supabase';
import { RootStackParamList } from '../AppNavigator';
import BottomNavigationBar from '../components/BottomNavigationBar';
import { LinearGradient } from 'expo-linear-gradient';

interface QuizAttempt {
  id: string;
  user_id: string;
  quiz_id: string;
  score: number;
  completed_at: string;
  personality_type?: string;
}

type HomeScreenProps = {
  navigation: NativeStackNavigationProp<RootStackParamList>;
};

interface Profile {
  id: string;
  name: string;
  avatar_url: string | null;
  xp: number;
  streak: number;
  completed_lessons: number;
  completed_quizzes: number;
  social_links: { [key: string]: string };
  created_at: string;
  updated_at: string;
}

interface Lesson {
  id: string;
  title: string;
  description: string;
  progress: number;
  isPremium?: boolean;
  isSpecialLesson?: boolean; // New property to identify special lessons without tests
  icon: keyof typeof MaterialCommunityIcons.glyphMap;
  topics: {
    title: string;
    content: string;
    image?: string;
    videoUrl?: string;
    videoAsset?: string;
    keyPoints?: string[];
    quiz?: {
      title: string;
      questions: {
        question: string;
        type: 'single' | 'multiple' | 'matching';
        options: string[];
        correctAnswers: number[];
        explanation: string;
      }[];
    };
  }[];
}

interface QuizQuestion {
  question: string;
  type: 'single' | 'multiple' | 'matching';
  options?: string[];
  correctAnswers?: number[];
  pairs?: Array<{
    situation: string;
    answer: string;
  }>;
}

interface Quiz {
  title: string;
  questions: QuizQuestion[];
}

interface Topic {
  title: string;
  content: string;
  image?: string;
  videoUrl?: string;
  videoAsset?: string;
  keyPoints?: string[];
  quiz?: Quiz;
}

interface UserProgress {
  id: string;
  user_id: string;
  lesson_id: string;
  completed: boolean;
  last_accessed: string;
  created_at: string;
  updated_at: string;
}

type TabKey = 'home' | 'leaderboard' | 'calendar' | 'profile';

const defaultLessons: Lesson[] = [
  {
    id: '1',
    title: 'ДДС в България',
    description: 'Научете за данъка върху добавената стойност, кога се прилага и какви са ставките.',
    progress: 0,
    isPremium: false,
    icon: 'cash-multiple' as keyof typeof MaterialCommunityIcons.glyphMap,
    topics: [
      {
        title: 'ДДС в България – кога се прилага и какви са ставките',
        content: 'Какво е ДДС и защо ни засяга?\n\nДанъкът върху добавената стойност (ДДС) е косвен данък, който се начислява върху почти всички стоки и услуги в България. В момента основната ставка е 20%, като за някои стоки, като книги и ресторантьорски услуги, има намалена ставка от 9%.\n\nКога се прилага ДДС?\n\nКогато пазаруваш в магазин, цената, която плащаш, вече включва ДДС. За фирмите, които надвишават определен годишен оборот (100 000 лв. от 2024 г.), регистрацията по ДДС е задължителна.\n\nКой го плаща?\n\nВъпреки че потребителят го плаща на касата, ДДС реално се отчита и превежда към държавата от фирмата-продавач. Тази система позволява прозрачност и контрол върху икономическите потоци.',
        videoUrl: 'lesson3.mp4',
        keyPoints: [
          'Основна ставка на ДДС: 20%',
          'Намалена ставка: 9% (за книги и ресторантьорски услуги)',
          'Задължителна регистрация за фирми с оборот над 100 000 лв. от 2024 г.',
          'ДДС се включва в крайната цена на стоките и услугите',
          'Фирмите отчитат и превеждат ДДС към държавата'
        ],
        quiz: {
          title: 'Тест за ДДС',
          questions: [
            {
              question: 'Колко % е основното заплащане на ДДС в България?',
              type: 'single',
              options: [
                '15%, като за някои стоки е 10%',
                '10%, като за някои стоки е 7%',
                '20%, като за някои стоки е 15%',
                '20%, като за някои стоки е 9%'
              ],
              correctAnswers: [3],
              explanation: 'В България основната ставка на ДДС е 20%, а намалената ставка е 9%. Намалената ставка се прилага за определени стоки и услуги като книги и ресторантьорски услуги.'
            },
            {
              question: 'Вярно ли е, че за фирмите, които надвишават определен годишен оборот регистрацията по ДДС е задължителна?',
              type: 'single',
              options: ['Вярно', 'Грешно'],
              correctAnswers: [0],
              explanation: 'Да, това е вярно. От 2024 г. фирмите с годишен оборот над 100 000 лв. са задължени да се регистрират по ДДС. Това е част от мерките за подобряване на данъчната дисциплина.'
            },
            {
              question: 'Къде отива данъкът върху добавената стойност, който плащаме?',
              type: 'single',
              options: [
                'Разпределя се на служителите на даден магазин или фирма',
                'При управителя на дадена фирма или верига от магазини',
                'Превежда се към държавата от фирмата-продавач'
              ],
              correctAnswers: [2],
              explanation: 'Въпреки че потребителят плаща ДДС при покупката, данъкът се отчита и превежда към държавата от фирмата-продавач. Това е част от механизма за контрол на данъчните постъпления.'
            },
            {
              question: 'Колко е нормалното ДДС на даден продукт, който струва 83,33 лв.?',
              type: 'single',
              options: [
                '12,54 лв.',
                '16,67 лв.',
                '14,74 лв.',
                '23,33 лв.'
              ],
              correctAnswers: [1],
              explanation: 'При основна ставка от 20%, ДДС се изчислява като 20% от цената без ДДС. В този случай, ако крайната цена е 100 лв. (83,33 лв. + 16,67 лв. ДДС), то ДДС е 16,67 лв.'
            }
          ]
        }
      }
    ]
  },
  {
    id: '2',
    title: 'Как работят кредитите',
    description: 'Научете за различните видове кредити, техните характеристики и кога да ги използвате.',
    progress: 0,
    isPremium: false,
    icon: 'bank' as keyof typeof MaterialCommunityIcons.glyphMap,
    topics: [
      {
        title: 'Как работят кредитите',
        content: 'Кредитите са като заем – вземаш пари назаем и ги връщаш с лихва. Ето какво трябва да знаеш:\n\nВидове кредити:\n\n1. Потребителски кредит – За покупка на стоки (телефон, лаптоп, мебели)\n2. Ипотека – За закупуване на имот\n3. Автокредит – За закупуване на автомобил\n4. Кредитна карта – За разходи, които връщаш месечно\n\nВажно е да знаеш:\n\nЛихвата – Допълнителната сума, която плащаш за заема\nСрокът – За колко време ще връщаш кредита\nМесечната вноска – Колко плащаш всеки месец\n\nПреди да вземеш кредит, помисли:\n\nМога ли да си го позволя?\nКолко ще платя общо (с лихвата)?\nКакво става, ако не мога да плащам?',
        videoUrl: 'lesson1.mp4',
        keyPoints: [
          'Потребителски кредит – За по-малки покупки (телефон, уред). Обикновено до 10 000 лв. Погасява се на месечни вноски с лихва.',
          'Ипотечен кредит – За закупуване на жилище. Голяма сума (често над 100 000 лв.), дълъг срок (20–30 години). Изисква стабилен доход.',
          'Бързи кредити – Достъпни, но с висока лихва. Подходящи само при крайна необходимост.',
          'Лихва – Допълнителната сума, която плащате за използването на кредита. Колкото по-ниска е лихвата, толкова по-изгоден е кредитът.',
          'Гратисен период – Време, през което не се изисква плащане на лихва. Използвайте го разумно.'
        ],
        quiz: {
          title: 'Тест за кредити',
          questions: [
            {
              question: 'Каква е основната цел на потребителския кредит?',
              type: 'single',
              options: [
                'Закупуване на жилище',
                'Покупка на дребни стоки като техника',
                'Инвестиране на фондовата борса'
              ],
              correctAnswers: [1],
              explanation: 'Потребителският кредит е предназначен за по-малки покупки като техника, мебели или други потребителски стоки.'
            },
            {
              question: 'Ако не можеш да изплатиш кредита си навреме…',
              type: 'single',
              options: [
                'Ще заведат дело срещу теб',
                'Ще намалят лихвата',
                'Ще започнат наказателни лихви'
              ],
              correctAnswers: [2],
              explanation: 'При забавяне на плащанията банките обикновено начисляват наказателни лихви, които значително увеличават общата сума за изплащане.'
            },
            {
              question: 'Кои от изброените характеристики се отнасят за бързите кредити?',
              type: 'multiple',
              options: [
                'Лесно достъпни',
                'Подходящи само в извънредни случаи',
                'Изискват ипотека на жилище',
                'Обикновено с висока лихва',
                'Погасяват се за 20–30 години'
              ],
              correctAnswers: [0, 1, 3],
              explanation: 'Бързите кредити са лесно достъпни, но имат висока лихва и са подходящи само при извънредни случаи. Те не изискват ипотека и имат кратък срок на погасяване.'
            },
            {
              question: 'Кой от изброените кредити обикновено изисква най-дълъг срок на погасяване?',
              type: 'single',
              options: [
                'Потребителски',
                'Бърз',
                'Ипотечен'
              ],
              correctAnswers: [2],
              explanation: 'Ипотечните кредити обикновено имат най-дълъг срок на погасяване – от 20 до 30 години, поради големия размер на заеманата сума.'
            },
            {
              question: 'Какво представлява лихвата по кредит?',
              type: 'single',
              options: [
                'Допълнителната сума, която се плаща за използването на кредита',
                'Месечната сума за погасяване на кредита',
                'Период, през който не се изисква плащане',
                'Такса за обработка на кредита'
              ],
              correctAnswers: [0],
              explanation: 'Лихвата е допълнителната сума, която се плаща за използването на кредита. Това е цената, която банката таксува за предоставянето на кредита.'
            },
            {
              question: 'Какво представлява вноската по кредит?',
              type: 'single',
              options: [
                'Допълнителната сума за използване на кредита',
                'Месечната сума за погасяване на кредита',
                'Първоначалната такса за кредита',
                'Такса за обработка на заявката'
              ],
              correctAnswers: [1],
              explanation: 'Вноската е месечната сума, която трябва да плащате за погасяване на кредита. Тя включва част от главницата и лихвата.'
            },
            {
              question: 'Какво представлява гратисният период при кредит?',
              type: 'single',
              options: [
                'Период, през който не се плаща главницата',
                'Период, през който кредитът е безплатен',
                'Период, през който не се изисква плащане на лихва',
                'Период, през който банката не начислява такси'
              ],
              correctAnswers: [2],
              explanation: 'Гратисният период е времето, през което не се изисква плащане на лихва по кредита. Това е период, когато можете да използвате кредита без да плащате допълнителни лихви.'
            },
            {
              question: 'Какъв е основният риск при бързите кредити?',
              type: 'single',
              options: [
                'Бавна процедура по одобрение',
                'Висока лихва и риск от задлъжняване',
                'Трудност при намиране на кредитори'
              ],
              correctAnswers: [1],
              explanation: 'Основният риск при бързите кредити е високата лихва, която може да доведе до затруднения при изплащането и задлъжняване.'
            },
            {
              question: 'Кое от следните твърдения е вярно за потребителските кредити?',
              type: 'single',
              options: [
                'Изискват ипотека като обезпечение',
                'Предназначени са за покупка на жилище',
                'Обикновено са в размер до 10 000 лв.'
              ],
              correctAnswers: [2],
              explanation: 'Потребителските кредити обикновено са в размер до 10 000 лв. и не изискват ипотека като обезпечение.'
            }
          ]
        }
      }
    ]
  },
  {
    id: '3',
    title: 'Основни видове инвестиции',
    description: 'Научете за различните видове инвестиции, техните характеристики и кога да ги използвате.',
    progress: 0,
    isPremium: false,
    icon: 'chart-line' as keyof typeof MaterialCommunityIcons.glyphMap,
    topics: [
      {
        title: 'Основни видове инвестиции',
        content: 'Какво означава да инвестираш?\n\nИнвестицията е начин да увеличиш парите си, вместо просто да ги държиш. Има три основни вида:\n\nАкции – Купуваш малка част от дадена компания. Ако тя печели – печелиш и ти. Но има риск – ако се провали, губиш пари.\n\nОблигации – Като заем. Държавата или фирма ти "взема назаем" пари и ти плаща лихва. По-сигурно, но и по-малко печелившо.\n\nИмоти – Купуваш жилище или земя и печелиш от наем или препродажба. Изисква повече капитал.',
        videoUrl: 'lesson2.mp4',
        keyPoints: [
          'Акции – Дял от компания, потенциално висока печалба, но с риск от загуба',
          'Облигации – Заем с фиксирана лихва, по-сигурни, но с по-ниска възвръщаемост',
          'Имоти – Инвестиция в недвижими имоти, изисква голям капитал, но може да носи стабилен доход',
          'Риск и възвръщаемост – Колкото по-висок е потенциалният доход, толкова по-голям е рискът',
          'Диверсификация – Разпределяне на инвестициите между различни видове активи за намаляване на риска'
        ],
        quiz: {
          title: 'Тест за инвестиции',
          questions: [
            {
              question: 'Кои от следните твърдения са верни за инвестирането в имоти?',
              type: 'multiple',
              options: [
                'Изисква по-голям първоначален капитал',
                'Може да носи доход чрез наем',
                'Подходящо е само за краткосрочни вложения',
                'Позволява печалба при препродажба',
                'Носи по-висок риск от облигации, но и по-малък от акциите'
              ],
              correctAnswers: [0, 1, 3],
              explanation: 'Инвестицията в имоти изисква значителен първоначален капитал, може да генерира доход чрез наем и позволява печалба при препродажба. Тя е подходяща и за дългосрочни вложения.'
            },
            {
              question: 'Какъв е основният риск при инвестирането в акции?',
              type: 'single',
              options: [
                'Да не получиш лихва',
                'Да загубиш пари, ако компанията се провали',
                'Да не намериш купувач за имота'
              ],
              correctAnswers: [1],
              explanation: 'Основният риск при инвестирането в акции е потенциалната загуба на пари, ако компанията, в която сте инвестирали, се провали или нейните акции загубят стойност.'
            },
            {
              question: 'Кое твърдение е вярно за облигациите?',
              type: 'single',
              options: [
                'Генерират голяма печалба, но с висок риск',
                'Те са по-сигурни, но носят по-малка печалба',
                'Купуват се само от банки'
              ],
              correctAnswers: [1],
              explanation: 'Облигациите са по-сигурна инвестиция в сравнение с акциите, но обикновено носят по-ниска възвръщаемост. Те предлагат фиксирана лихва и са подходящи за консервативни инвеститори.'
            },
            {
              question: 'Какво може да се случи, ако компанията, в която си инвестирал чрез акции, започне да губи пари?',
              type: 'single',
              options: [
                'Ще получиш фиксирана лихва, независимо от резултатите',
                'Може да загубиш част или цялата си инвестиция',
                'Ще получиш по-високи дивиденти'
              ],
              correctAnswers: [1],
              explanation: 'Когато компания започне да губи пари, стойността на нейните акции обикновено намалява, което може да доведе до загуба на част или цялата инвестиция.'
            },
            {
              question: 'Какъв е основният източник на доход при инвестиция в имоти?',
              type: 'single',
              options: [
                'От дивиденти',
                'От наеми или препродажба',
                'От държавна субсидия'
              ],
              correctAnswers: [1],
              explanation: 'Основният източник на доход при инвестиция в имоти идва от наемите, които получавате от наемателите, или от печалбата при препродажба на имота.'
            },
            {
              question: 'Коя инвестиция обикновено се смята за най-сигурна?',
              type: 'single',
              options: [
                'Акции',
                'Облигации',
                'Имоти'
              ],
              correctAnswers: [1],
              explanation: 'Облигациите обикновено се смятат за най-сигурната инвестиция от трите основни вида, тъй като предлагат фиксирана лихва и по-нисък риск от загуба на капитал.'
            },
            {
              question: 'Коя от следните инвестиции гарантира висока и сигурна печалба?',
              type: 'single',
              options: [
                'Акции на известна компания',
                'Облигации с гарантирана лихва',
                'Нито една – всяка инвестиция носи риск'
              ],
              correctAnswers: [2],
              explanation: 'Всяка инвестиция носи определен риск. Дори най-сигурните инвестиции не гарантират висока печалба. Важно е да разберете рисковете и да диверсифицирате инвестициите си.'
            },
            {
              question: 'Иван купува акции на технологична фирма и следи дали ще се покачат цените. Какъв вид инвестиция прави Иван?',
              type: 'single',
              options: [
                'Инвестиция в акции',
                'Инвестиция в облигации',
                'Инвестиция в имоти'
              ],
              correctAnswers: [0],
              explanation: 'Иван инвестира в акции, тъй като купува дял от технологична компания. Това е инвестиция в акции, която може да носи потенциална печалба при повишаване на цената на акциите.'
            },
            {
              question: 'Мария дава пари на държавата и получава фиксирана лихва всяка година. Какъв вид инвестиция прави Мария?',
              type: 'single',
              options: [
                'Инвестиция в акции',
                'Инвестиция в облигации',
                'Инвестиция в имоти'
              ],
              correctAnswers: [1],
              explanation: 'Мария инвестира в облигации, тъй като дава заем на държавата срещу фиксирана лихва. Това е по-сигурна инвестиция, която носи предвидим доход.'
            },
            {
              question: 'Петър купува апартамент и го отдава под наем. Какъв вид инвестиция прави Петър?',
              type: 'single',
              options: [
                'Инвестиция в акции',
                'Инвестиция в облигации',
                'Инвестиция в имоти'
              ],
              correctAnswers: [2],
              explanation: 'Петър инвестира в имоти, тъй като купува недвижим имот за наем. Това е инвестиция, която може да носи стабилен доход от наеми и потенциална печалба при препродажба.'
            }
          ]
        }
      }
    ]
  },
  {
    id: '7',
    title: 'Спестяване и финансово планиране',
    description: 'Научете как да управлявате парите си разумно, да спестявате и да планирате финансовото си бъдеще.',
    progress: 0,
    isPremium: false,
    icon: 'piggy-bank' as keyof typeof MaterialCommunityIcons.glyphMap,
    topics: [
      {
        title: 'Спестяване и финансово планиране',
        content: 'Да спестяваш пари не означава да се лишаваш. Това означава да мислиш за бъдещето си. Дори малки суми всеки месец могат да направят голяма разлика след време. Финансовото планиране е като план за пътуване – казваш си къде искаш да стигнеш и как ще стигнеш до там.\n\nЗащо е важно да спестяваме?\n\nЗа спешни случаи (пример: неочакван разход за лекар)\nЗа по-големи цели (телефон, лаптоп, образование, кола)\nЗа спокойствие – знаеш, че имаш резерв',
        image: 'https://images.unsplash.com/photo-1579621970795-87facc2f976d?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80',
        videoUrl: 'lesson7.mp4',
        keyPoints: [
          'Финансовото планиране е стратегия за управление на ресурсите с конкретни цели',
          'Спестяването на малки суми редовно води до значителни резерви с времето',
          'Важно е да имаме резерв за спешни случаи и по-големи цели',
          'Добрите финансови навици включват анализ на разходите и планиране на покупките',
          'Плащането "първо на себе си" означава отделяне на фиксиран процент от дохода за спестяване'
        ],
        quiz: {
          title: 'Тест за спестяване и финансово планиране',
          questions: [
            {
              question: 'Кое от следните най-точно описва целта на финансовото планиране?',
              type: 'single',
              options: [
                'Да ограничиш всички несъществени разходи и да инвестираш само в сигурни активи',
                'Да изготвиш стратегия за управление на ресурсите си с оглед постигане на конкретни финансови цели',
                'Да следиш стриктно банковите си извлечения, без значение от дохода'
              ],
              correctAnswers: [1],
              explanation: 'Финансовото планиране е процес на изготвяне на стратегия за управление на личните финанси, фокусирана върху постигането на конкретни финансови цели.'
            },
            {
              question: 'Кои от изброените навици могат да подпомогнат изграждането на устойчива практика за спестяване?',
              type: 'multiple',
              options: [
                'Анализ на разходите чрез мобилно приложение',
                'Придържане към предварително съставен списък при покупки',
                'Използване на кредитна карта за всяка покупка',
                'Закупуване на намалени продукти, независимо от нуждата'
              ],
              correctAnswers: [0, 1],
              explanation: 'Анализът на разходите и придържането към списък при покупки са навици, които помагат за контрол на разходите и ефективно спестяване.'
            },
            {
              question: 'Каква е целта на спестяването за финансова сигурност?',
              type: 'single',
              options: [
                'Създаване на буфер за неочаквани събития',
                'Натрупване на средства за предстояща голяма покупка',
                'Намаляване на стреса чрез контрол върху финансите'
              ],
              correctAnswers: [0],
              explanation: 'Финансовата сигурност се постига чрез създаване на буфер за неочаквани събития, което е една от основните цели на спестяването.'
            },
            {
              question: 'Каква е целта на спестяването за осъществяване на дългосрочна цел?',
              type: 'single',
              options: [
                'Създаване на буфер за неочаквани събития',
                'Натрупване на средства за предстояща голяма покупка',
                'Намаляване на стреса чрез контрол върху финансите'
              ],
              correctAnswers: [1],
              explanation: 'Осъществяването на дългосрочна цел чрез спестяване включва натрупване на средства за предстояща голяма покупка.'
            },
            {
              question: 'Каква е целта на спестяването за психологическо спокойствие?',
              type: 'single',
              options: [
                'Създаване на буфер за неочаквани събития',
                'Натрупване на средства за предстояща голяма покупка',
                'Намаляване на стреса чрез контрол върху финансите'
              ],
              correctAnswers: [2],
              explanation: 'Психологическото спокойствие се постига чрез намаляване на стреса, което е възможно благодарение на контрола върху финансите.'
            },
            {
              question: 'Какво се подразбира под израза "плащай първо на себе си" в контекста на спестяването?',
              type: 'single',
              options: [
                'Приоритизиране на текущите сметки, преди харчене за лични нужди',
                'Отделяне на фиксиран процент от дохода за бъдещи цели, преди останалите разходи',
                'Разпределяне на бюджета равномерно между основни и второстепенни разходи'
              ],
              correctAnswers: [1],
              explanation: '"Плащането първо на себе си" означава отделяне на фиксиран процент от дохода за бъдещи цели, преди останалите разходи.'
            },
            {
              question: 'Кои ситуации биха могли да се разглеждат като примери за нефункционално управление на личните финанси?',
              type: 'multiple',
              options: [
                'Покупка на скъпа техника, мотивирана само от намаление',
                'Отлагане на покупка, за да се прецени нуждата',
                'Прекомерна употреба на пари в брой, без водене на отчет',
                'Системно отделяне на процент от дохода за резервен фонд'
              ],
              correctAnswers: [0, 2],
              explanation: 'Покупката на скъпи стоки само поради намаление и прекомерната употреба на пари без отчет са примери за лошо финансово управление.'
            },
            {
              question: 'Кое от следните е стратегическо поведение за избягване на ненужни разходи?',
              type: 'single',
              options: [
                'Купуване на артикули, когато има "изгодни" оферти',
                'Изграждане на навик за отложено вземане на решение при покупки',
                'Повишаване на кредитния лимит за по-голяма финансова гъвкавост'
              ],
              correctAnswers: [1],
              explanation: 'Изграждането на навик за отложено вземане на решение при покупки е стратегическо поведение за избягване на ненужни разходи.'
            },
            {
              question: 'Кое твърдение най-добре изразява ползата от спестяването дори на малки суми?',
              type: 'single',
              options: [
                'Единствено големите спестявания имат реална стойност',
                'Малките спестявания не могат да се справят със сериозни разходи',
                'Постоянното отделяне на малки суми води до значителни резерви с течение на времето'
              ],
              correctAnswers: [2],
              explanation: 'Постоянното отделяне на малки суми води до значителни резерви с течение на времето.'
            },
            {
              question: 'Какъв е резултатът от изчакването преди покупка?',
              type: 'single',
              options: [
                'Намаляване на импулсивните разходи',
                'По-добър контрол върху разходите',
                'Натрупване на финансова стабилност и независимост'
              ],
              correctAnswers: [0],
              explanation: 'Изчакването преди покупка води до намаляване на импулсивните разходи.'
            },
            {
              question: 'Какъв е резултатът от воденето на разходен дневник чрез приложение?',
              type: 'single',
              options: [
                'Намаляване на импулсивните разходи',
                'По-добър контрол върху разходите',
                'Натрупване на финансова стабилност и независимост'
              ],
              correctAnswers: [1],
              explanation: 'Воденето на разходен дневник чрез приложение води до по-добър контрол върху разходите.'
            },
            {
              question: 'Какъв е резултатът от редовното спестяване на фиксиран процент?',
              type: 'single',
              options: [
                'Намаляване на импулсивните разходи',
                'По-добър контрол върху разходите',
                'Натрупване на финансова стабилност и независимост'
              ],
              correctAnswers: [2],
              explanation: 'Редовното спестяване на фиксиран процент води до натрупване на финансова стабилност и независимост.'
            }
          ]
        }
      }
    ]
  },
  {
    id: '8',
    title: 'Банкови депозити',
    description: 'Научете за различните видове банкови депозити, техните характеристики и лихвени проценти.',
    progress: 0,
    isPremium: false,
    icon: 'bank-plus' as keyof typeof MaterialCommunityIcons.glyphMap,
    topics: [
      {
        title: 'Видове банкови депозити и лихви',
        content: 'Банковите депозити са сигурен начин да съхраниш парите си и да получаваш малка печалба от тях (лихва). Ето основните видове:\n\n1. Спестовен депозит\nПарите стоят в банката и можеш да ги теглиш, когато поискаш. Лихвата е малка (примерно 0.01% – 0.5% на година), но парите ти са достъпни.\n\n2. Срочен депозит\nЗаключваш парите за определено време (примерно 6 месеца, 1 година). Ако ги изтеглиш по-рано, губиш част или цялата лихва. Лихвите са по-високи (1–3% или повече, в зависимост от срока и банката).\n\n3. Онлайн депозити\nПодобни на срочните, но ги управляваш изцяло през интернет. Често имат малко по-добри условия, защото банката спестява от разходи.\n\nВажно: Лихвите се променят – провери актуалните условия на различни банки.',
        image: 'https://images.unsplash.com/photo-1567427017947-545c5f8d16ad?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80',
        videoUrl: 'lesson5.mp4',
        keyPoints: [
          'Спестовен депозит – Свободен достъп до парите, ниска лихва (0.01% – 0.5%)',
          'Срочен депозит – Фиксиран срок, по-висока лихва (1-3%), загуба на лихва при предсрочно теглене',
          'Онлайн депозит – Управление през интернет, често по-добри условия поради по-ниски разходи за банката',
          'Лихвите варират според срока, банката и вида на депозита',
          'Важно е да се проверят актуалните условия на различни банки'
        ],
        quiz: {
          title: 'Тест за банкови депозити',
          questions: [
            {
              question: 'Кое от следните най-точно описва основното предимство на срочния депозит спрямо спестовния?',
              type: 'single',
              options: [
                'Парите могат да се теглят по всяко време',
                'Лихвата е по-висока, ако не се теглят преди изтичане на срока',
                'Парите се депозират в чужда валута'
              ],
              correctAnswers: [1],
              explanation: 'Основното предимство на срочния депозит е по-високата лихва, която се получава при спазване на договорения срок.'
            },
            {
              question: 'Кои твърдения се отнасят за спестовния депозит?',
              type: 'multiple',
              options: [
                'Позволява свободен достъп до парите',
                'Изисква фиксиран срок за теглене',
                'Предлага по-ниска лихва в сравнение със срочния',
                'Изисква управление само през интернет'
              ],
              correctAnswers: [0, 2],
              explanation: 'Спестовният депозит се характеризира със свободен достъп до парите и по-ниска лихва в сравнение със срочния депозит.'
            },
            {
              question: 'Какво е основното свойство на спестовния депозит?',
              type: 'single',
              options: [
                'Достъпност по всяко време с ниска лихва',
                'По-висока лихва при ангажимент със срок',
                'Управление чрез интернет и често по-добри условия'
              ],
              correctAnswers: [0],
              explanation: 'Спестовният депозит се характеризира с достъпност по всяко време, но предлага по-ниска лихва.'
            },
            {
              question: 'Какво е основното свойство на срочния депозит?',
              type: 'single',
              options: [
                'Достъпност по всяко време с ниска лихва',
                'По-висока лихва при ангажимент със срок',
                'Управление чрез интернет и често по-добри условия'
              ],
              correctAnswers: [1],
              explanation: 'Срочният депозит предлага по-висока лихва, но изисква ангажимент за определен срок.'
            },
            {
              question: 'Какво е основното свойство на онлайн депозита?',
              type: 'single',
              options: [
                'Достъпност по всяко време с ниска лихва',
                'По-висока лихва при ангажимент със срок',
                'Управление чрез интернет и често по-добри условия'
              ],
              correctAnswers: [2],
              explanation: 'Онлайн депозитът се характеризира с управление чрез интернет и често предлага по-добри условия.'
            },
            {
              question: 'Кое от следните действия може да доведе до загуба на лихва при срочен депозит?',
              type: 'single',
              options: [
                'Депозиране на твърде малка сума',
                'Теглене на средства преди края на договорения срок',
                'Управление на депозита през мобилно приложение'
              ],
              correctAnswers: [1],
              explanation: 'При срочен депозит, тегленето на средства преди края на договорения срок може да доведе до загуба на лихва.'
            },
            {
              question: 'Кои са възможни причини онлайн депозитите да предлагат по-добри условия?',
              type: 'multiple',
              options: [
                'По-малко разходи за банката, тъй като липсва физическо обслужване',
                'Повече такси за клиентите',
                'Автоматизирани процеси, които намаляват нуждата от персонал',
                'Повишен риск от загуба на лихви'
              ],
              correctAnswers: [0, 2],
              explanation: 'Онлайн депозитите често предлагат по-добри условия поради по-ниските разходи за банката и автоматизираните процеси.'
            },
            {
              question: 'Кое твърдение е вярно относно лихвите по депозитите?',
              type: 'single',
              options: [
                'Лихвите са фиксирани за всички банки и не се променят',
                'Лихвите могат да варират според срока, банката и вида на депозита',
                'Всички депозити имат еднаква доходност независимо от условията'
              ],
              correctAnswers: [1],
              explanation: 'Лихвите по депозитите могат да варират в зависимост от срока, банката и вида на депозита.'
            },
            {
              question: 'Какво е потенциалното предимство на срочния депозит?',
              type: 'single',
              options: [
                'По-висока възвращаемост при ангажимент',
                'Лесно управление от всяка точка',
                'Незабавен достъп до средства при нужда'
              ],
              correctAnswers: [0],
              explanation: 'Срочният депозит предлага по-висока възвращаемост при спазване на ангажимента за определен срок.'
            },
            {
              question: 'Какво е потенциалното предимство на онлайн депозита?',
              type: 'single',
              options: [
                'По-висока възвращаемост при ангажимент',
                'Лесно управление от всяка точка',
                'Незабавен достъп до средства при нужда'
              ],
              correctAnswers: [1],
              explanation: 'Онлайн депозитът позволява лесно управление от всяка точка чрез интернет.'
            },
            {
              question: 'Какво е потенциалното предимство на спестовния депозит?',
              type: 'single',
              options: [
                'По-висока възвращаемост при ангажимент',
                'Лесно управление от всяка точка',
                'Незабавен достъп до средства при нужда'
              ],
              correctAnswers: [2],
              explanation: 'Спестовният депозит предлага незабавен достъп до средства при нужда.'
            },
            {
              question: 'Кое от следните е вярно за онлайн депозитите в сравнение със стандартните срочни депозити?',
              type: 'single',
              options: [
                'Онлайн депозитите винаги носят по-висока лихва без изключения',
                'Те са по-гъвкави по отношение на теглене',
                'Обикновено предлагат по-добри условия поради по-ниски разходи за банката'
              ],
              correctAnswers: [2],
              explanation: 'Онлайн депозитите обикновено предлагат по-добри условия поради по-ниските разходи за банката за обслужване.'
            }
          ]
        }
      }
    ]
  },
  {
    id: '9',
    title: 'Методи за бюджетиране',
    description: 'Научете различни методи за управление на личните финанси и създаване на ефективен бюджет.',
    progress: 0,
    isPremium: false,
    icon: 'calculator' as keyof typeof MaterialCommunityIcons.glyphMap,
    topics: [
      {
        title: 'Методи за бюджетиране – как да управляваме парите си',
        content: 'Да си направиш бюджет означава да знаеш:\n\nКолко пари влизат (приходи)\nКолко пари излизат (разходи)\nКакво можеш да спестиш\n\n🔹 Метод 50/30/20\nЕдин от най-лесните и популярни методи.\nРазделяш месечния си доход така:\n50% за нужди – храна, сметки, транспорт\n30% за желания – забавления, нови дрехи, заведения\n20% за спестяване или изплащане на дългове\n\n🔹 Метод с пликове (или виртуални "пликове")\nРазделяш парите си по категории: храна, транспорт, развлечения и т.н. Когато "пликът" свърши – спираш харченето по тази категория.\n\n🔹 Бюджет 0 (zero-based budget)\nВсеки лев има цел – нищо не остава "неразпределено". Дори спестяването е част от бюджета.',
        image: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80',
        videoUrl: 'lesson9.mp4',
        keyPoints: [
          'Метод 50/30/20 – Разделяне на дохода на три основни категории: нужди (50%), желания (30%), спестяване (20%)',
          'Метод с пликове – Категоризиране на разходите със строго ограничение за всяка категория',
          'Zero-based бюджет – Предварително планиране на всеки лев от дохода',
          'Важно е да се проследяват всички приходи и разходи',
          'Бюджетирането помага за контрол върху финансите и постигане на финансови цели'
        ],
        quiz: {
          title: 'Тест за методи за бюджетиране',
          questions: [
            {
              question: 'Каква е основната цел на създаването на личен бюджет?',
              type: 'single',
              options: [
                'Да се избегнат напълно всички разходи за удоволствия',
                'Да се следи само дали има достатъчно средства за сметки',
                'Да се контролира разпределението на приходите и да се осигури възможност за спестяване'
              ],
              correctAnswers: [2],
              explanation: 'Основната цел на личния бюджет е да контролира разпределението на приходите и да осигури възможност за спестяване, като балансира между различните нужди и желания.'
            },
            {
              question: 'Кои от следните елементи са основни при изготвянето на личен бюджет?',
              type: 'multiple',
              options: [
                'Изчисляване на всички доходи',
                'Избиране на банка с най-висока лихва',
                'Проследяване на разходите',
                'Определяне на сума за спестяване или инвестиция'
              ],
              correctAnswers: [0, 2, 3],
              explanation: 'При изготвянето на личен бюджет е важно да се изчислят всички доходи, да се проследяват разходите и да се определи сума за спестяване или инвестиция.'
            },
            {
              question: 'Каква е основната характеристика на метода 50/30/20?',
              type: 'single',
              options: [
                'Ясно разпределение на доходите по три основни групи',
                'Категоризиране на разходите със строго ограничение',
                'Всеки лев е разпределен предварително и целево'
              ],
              correctAnswers: [0],
              explanation: 'Методът 50/30/20 се характеризира с ясно разпределение на доходите по три основни групи: нужди (50%), желания (30%) и спестяване (20%).'
            },
            {
              question: 'Каква е основната характеристика на метода с пликове?',
              type: 'single',
              options: [
                'Ясно разпределение на доходите по три основни групи',
                'Категоризиране на разходите със строго ограничение',
                'Всеки лев е разпределен предварително и целево'
              ],
              correctAnswers: [1],
              explanation: 'Методът с пликове се характеризира с категоризиране на разходите със строго ограничение за всяка категория.'
            },
            {
              question: 'Каква е основната характеристика на zero-based бюджета?',
              type: 'single',
              options: [
                'Ясно разпределение на доходите по три основни групи',
                'Категоризиране на разходите със строго ограничение',
                'Всеки лев е разпределен предварително и целево'
              ],
              correctAnswers: [2],
              explanation: 'Zero-based бюджетът се характеризира с предварително и целево разпределение на всеки лев от дохода.'
            },
            {
              question: 'Кое поведение най-добре съответства на принципите на zero-based бюджетиране?',
              type: 'single',
              options: [
                'Спестяване само ако останат пари в края на месеца',
                'Използване на приблизителни стойности за разходите',
                'Предварително задаване на цел за всяка част от дохода'
              ],
              correctAnswers: [2],
              explanation: 'Zero-based бюджетирането изисква предварително задаване на цел за всяка част от дохода, включително спестяванията.'
            },
            {
              question: 'Кои предимства предлага методът с пликове (или виртуални пликове)?',
              type: 'multiple',
              options: [
                'Ограничаване на харченето по категории',
                'Свобода да прехвърляш пари между категориите без последици',
                'Подобряване на самодисциплината при управление на пари',
                'Планиране на разходите на база налични средства'
              ],
              correctAnswers: [0, 2, 3],
              explanation: 'Методът с пликове предлага предимства като ограничаване на харченето по категории, подобряване на самодисциплината и планиране на разходите на база налични средства.'
            },
            {
              question: 'Коя от следните ситуации показва грешно прилагане на метода 50/30/20?',
              type: 'single',
              options: [
                'Изразходване на 50% от дохода за храна, наем и транспорт',
                'Отделяне на 30% за кино, книги и ресторанти',
                'Спестяване на 5%, а останалите 15% се харчат за дрехи и игри'
              ],
              correctAnswers: [2],
              explanation: 'Грешното прилагане на метода 50/30/20 е когато се спестява само 5% вместо предвидените 20%, а останалите 15% се използват за други разходи.'
            },
            {
              question: 'Какво е предназначението на 50% от дохода според метода 50/30/20?',
              type: 'single',
              options: [
                'Основни нужди като наем и транспорт',
                'Желания и развлечения',
                'Спестяване или изплащане на дългове'
              ],
              correctAnswers: [0],
              explanation: 'Според метода 50/30/20, 50% от дохода се използват за основни нужди като наем, транспорт и храна.'
            },
            {
              question: 'Какво е предназначението на 30% от дохода според метода 50/30/20?',
              type: 'single',
              options: [
                'Основни нужди като наем и транспорт',
                'Желания и развлечения',
                'Спестяване или изплащане на дългове'
              ],
              correctAnswers: [1],
              explanation: 'Според метода 50/30/20, 30% от дохода се използват за желания и развлечения.'
            },
            {
              question: 'Какво е предназначението на 20% от дохода според метода 50/30/20?',
              type: 'single',
              options: [
                'Основни нужди като наем и транспорт',
                'Желания и развлечения',
                'Спестяване или изплащане на дългове'
              ],
              correctAnswers: [2],
              explanation: 'Според метода 50/30/20, 20% от дохода се използват за спестяване или изплащане на дългове.'
            },
            {
              question: 'Кое твърдение е вярно относно zero-based бюджета?',
              type: 'single',
              options: [
                'Винаги остава резервен остатък в края на месеца',
                'Може да се използва само при фиксирани доходи',
                'Изисква планиране на всеки лев от приходите, включително спестяванията'
              ],
              correctAnswers: [2],
              explanation: 'Zero-based бюджетът изисква планиране на всеки лев от приходите, включително спестяванията, като нищо не остава неразпределено.'
            }
          ]
        }
      }
    ]
  },
  {
    id: '10',
    title: 'Как да спестяваме ефективно',
    description: 'Научете практични съвети за ефективно спестяване и избягване на ненужни разходи.',
    progress: 0,
    isPremium: false,
    isSpecialLesson: true, // Mark this as a special lesson
    icon: 'piggy-bank-outline' as keyof typeof MaterialCommunityIcons.glyphMap,
    topics: [
      {
        title: 'Как да спестяваме ефективно и да избягваме ненужни разходи',
        content: 'Ефективното спестяване не е само за хора с високи доходи. Това е навик, който всеки може да развие. Ето няколко прости, но ефективни стратегии:\n\n1. Планирай покупките си\n• Направи списък преди да пазаруваш – и се придържай към него\n• Избягвай да пазаруваш когато си гладен или уморен\n• Проверявай какво вече имаш вкъщи\n\n2. Избягвай импулсивните покупки\n• Изчакай 24 часа преди да купиш нещо, което не е спешно\n• Запитай се: "Имам ли наистина нужда от това?"\n• Помисли колко часа трябва да работиш, за да си го позволиш\n\n3. Следене на разходите\n• Използвай мобилни приложения за проследяване на разходите\n• Прегледай редовно банковите си извлечения\n• Категоризирай разходите си, за да видиш къде отиват парите\n\n4. Умно пазаруване\n• Не купувай нещо само защото е на промоция\n• Сравнявай цените в различни магазини\n• Използвай програми за намаления и кешбек\n\n5. Плащай първо на себе си\n• Веднага щом получиш пари, отдели процент за спестяване\n• Дори 5-10% от дохода е добро начало\n• Автоматизирай спестяванията си чрез банкови преводи\n\nПомни: Малките промени в ежедневните навици могат да доведат до големи резултати с времето. Важното е да започнеш и да бъдеш последователен.',
        keyPoints: [
          'Планирай покупките си с предварителен списък',
          'Изчакай 24 часа преди импулсивни покупки',
          'Използвай приложения за проследяване на разходите',
          'Не купувай само защото нещо е на промоция',
          'Плащай първо на себе си – отделяй процент от дохода за спестяване'
        ],
        videoUrl: 'lesson10.mp4'
      }
    ]
  }
];

const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');
const STAT_PILL_WIDTH = (SCREEN_WIDTH - 48 - 12) / 2; // 48 for padding, 12 for gap

const HomeScreen: React.FC<HomeScreenProps> = ({ navigation }) => {
  const { theme } = useCustomTheme();
  const paperTheme = useTheme();
  const colors = theme?.colors || THEME.colors;
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [fadeAnim] = useState(new Animated.Value(0));
  const [userName, setUserName] = useState('');
  const [userLevel, setUserLevel] = useState(0);
  const [userXP, setUserXP] = useState(0);
  const [streakDays, setStreakDays] = useState(0);
  const [lessons, setLessons] = useState<Lesson[]>(defaultLessons);
  const [hasAttemptedTest, setHasAttemptedTest] = useState(false);
  const [loadingAttempts, setLoadingAttempts] = useState(true);
  const [activeTab, setActiveTab] = useState<TabKey>('home');
  const [scrollY] = useState(new Animated.Value(0));
  const [userProgress, setUserProgress] = useState<{ [key: string]: UserProgress }>({});

  const loadUserData = async () => {
    try {
      setLoading(true);
      setError(null);

      const { user, error: userError } = await auth.getCurrentUser();
      if (userError) throw userError;
      if (!user) {
        navigation.reset({
          index: 0,
          routes: [{ name: 'SignIn' }],
        });
        return;
      }

      // Fetch user progress for all lessons
      const { data: progressData, error: progressError } = await supabase
        .from('user_progress')
        .select('*')
        .eq('user_id', user.id);

      if (progressError) throw progressError;

      // Convert progress array to object for easier lookup
      const progressMap = (progressData || []).reduce((acc: { [key: string]: UserProgress }, progress: UserProgress) => {
        acc[progress.lesson_id] = progress;
        return acc;
      }, {});

      setUserProgress(progressMap);

      // Update lessons with actual progress
      const updatedLessons = defaultLessons.map(lesson => ({
        ...lesson,
        progress: progressMap[lesson.id]?.completed ? 1 : 0
      }));

      // Sort lessons so completed ones appear at the bottom
      const sortedLessons = [...updatedLessons].sort((a, b) => {
        // If both lessons have the same completion status, maintain original order
        if (a.progress === b.progress) {
          return defaultLessons.findIndex(l => l.id === a.id) - defaultLessons.findIndex(l => l.id === b.id);
        }
        // Put completed lessons (progress = 1) at the bottom
        return a.progress - b.progress;
      });

      setLessons(sortedLessons);

      // Get profile data for XP and other info
      const { data: profile, error: profileError } = await database.getProfile(user.id);
      if (profileError) throw profileError;

      // Get streak info separately
      const { data: streakInfo, error: streakError } = await database.getStreakInfo(user.id);
      if (streakError) throw streakError;

      if (profile) {
        const typedProfile = profile as Profile;
        setUserName(typedProfile.name || '');
        setUserLevel(Math.floor((typedProfile.xp || 0) / 1000));
        setUserXP(typedProfile.xp || 0);
        // Use streak from streakInfo instead of profile
        setStreakDays(streakInfo?.currentStreak || 0);
      }
    } catch (err) {
      console.error('Error loading user data:', err);
      setError('Failed to load user data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const checkPreviousAttempts = async () => {
    setLoadingAttempts(true);
    try {
      const { user, error: userError } = await auth.getCurrentUser();
      if (userError) throw userError;
      if (!user) {
        navigation.reset({
          index: 0,
          routes: [{ name: 'SignIn' }],
        });
        return;
      }

      // Check if user has already taken the personality test
      const { data: attempts, error: attemptsError } = await database.getQuizAttempts(user.id);
      if (attemptsError) throw attemptsError;

      const hasAttempted = (attempts as QuizAttempt[] || []).some(
        attempt => attempt.quiz_id === 'daily-challenge'
      );
      setHasAttemptedTest(hasAttempted);
    } catch (err) {
      console.error('Error checking previous attempts:', err);
    } finally {
      setLoadingAttempts(false);
    }
  };

  // Add focus listener to reload data when screen comes into focus
  useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // Reset fade animation
      fadeAnim.setValue(0);
      // Reload data
      loadUserData();
      checkPreviousAttempts();
      // Animate fade in
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }).start();
    });

    // Cleanup listener on unmount
    return unsubscribe;
  }, [navigation]);

  // Initial load
  useEffect(() => {
    loadUserData();
    checkPreviousAttempts();
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 500,
      useNativeDriver: true,
    }).start();
  }, []);

  useEffect(() => {
    if (!loading && !error) {
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }).start();
    }
  }, [loading, error]);

  const renderHeroSection = () => (
    <Animated.View style={[
      styles.heroContainer,
      {
        transform: [{
          translateY: scrollY.interpolate({
            inputRange: [-100, 0, 100],
            outputRange: [50, 0, -50],
            extrapolate: 'clamp'
          })
        }]
      }
    ]}>
      <LinearGradient
        colors={['#4A5AE8', '#3A4AD8']}
        style={styles.heroGradient}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      >
        <View style={styles.heroContent}>
          <View style={styles.welcomeContainer}>
            <Text style={styles.welcomeText}>
              Здравей, {userName || 'Потребител'}!
            </Text>
            <Text style={styles.welcomeSubtext}>
              Продължи към следващия си финансов успех
            </Text>
          </View>
          
          <View style={styles.statsContainer}>
            <View style={styles.statsRow}>
              <Surface style={[styles.statPill, { width: STAT_PILL_WIDTH }]}>
                <MaterialCommunityIcons name="star" size={18} color="#FFD700" />
                <View style={styles.statTextContainer}>
                  <Text style={styles.statValue}>{userXP}</Text>
                  <Text style={styles.statLabel}>XP</Text>
                </View>
              </Surface>
              
              <Surface style={[styles.statPill, { width: STAT_PILL_WIDTH }]}>
                <MaterialCommunityIcons name="trophy" size={18} color="#FFD700" />
                <View style={styles.statTextContainer}>
                  <Text style={styles.statValue}>{userLevel}</Text>
                  <Text style={styles.statLabel}>Ниво</Text>
                </View>
              </Surface>
            </View>
            
            <Surface style={[styles.statPill, styles.streakPill]}>
              <MaterialCommunityIcons name="fire" size={18} color="#FF6B6B" />
              <View style={styles.statTextContainer}>
                <Text style={styles.statValue}>{streakDays}</Text>
                <Text style={styles.statLabel}>Поредни дни</Text>
              </View>
            </Surface>
          </View>
        </View>
      </LinearGradient>
    </Animated.View>
  );

  const renderLessonCard = (lesson: Lesson) => {
    const handleMarkAsCompleted = async () => {
      try {
        const { user, error: userError } = await auth.getCurrentUser();
        if (userError) throw userError;
        if (!user) {
          navigation.reset({
            index: 0,
            routes: [{ name: 'SignIn' }],
          });
          return;
        }

        // Update progress in Supabase
        const { error: progressError } = await supabase
          .from('user_progress')
          .upsert({
            user_id: user.id,
            lesson_id: lesson.id,
            completed: true,
            last_accessed: new Date().toISOString(),
          });

        if (progressError) throw progressError;

        // Update local state
        setLessons(prevLessons => 
          prevLessons.map(l => 
            l.id === lesson.id 
              ? { ...l, progress: 1 }
              : l
          )
        );

        // Show success message
        Alert.alert(
          'Успех!',
          'Урокът е маркиран като завършен.',
          [{ text: 'OK' }]
        );

      } catch (err) {
        console.error('Error marking lesson as completed:', err);
        Alert.alert(
          'Грешка',
          'Възникна проблем при маркирането на урока. Моля, опитайте отново.',
          [{ text: 'OK' }]
        );
      }
    };

    // Special handling for "Как да спестяваме ефективно" lesson
    const isSpecialSavingLesson = lesson.id === '10' && lesson.title === 'Как да спестяваме ефективно';

    return (
      <Animated.View
        style={[
          styles.lessonCardContainer,
          {
            opacity: fadeAnim,
            transform: [{
              scale: fadeAnim.interpolate({
                inputRange: [0, 1],
                outputRange: [0.95, 1]
              })
            }]
          }
        ]}
      >
        <Surface style={styles.lessonCard} elevation={2}>
          <View style={styles.lessonHeader}>
            <View style={[
              styles.iconContainer,
              { backgroundColor: lesson.isPremium ? '#FFD700' : colors.primary + '20' }
            ]}>
              <MaterialCommunityIcons 
                name={lesson.icon} 
                size={24} 
                color={lesson.isPremium ? '#000' : colors.primary} 
              />
            </View>
            <View style={styles.lessonTitleContainer}>
              <Text style={styles.lessonTitle}>
                {lesson.title}
              </Text>
              {lesson.isPremium && (
                <Badge style={styles.premiumBadge}>Premium</Badge>
              )}
            </View>
          </View>

          <Text style={styles.lessonDescription}>
            {lesson.description}
          </Text>

          <View style={styles.progressSection}>
            <View style={styles.progressHeader}>
              <Text style={styles.progressLabel}>Прогрес</Text>
              <Text style={styles.progressPercentage}>
                {Math.round(lesson.progress * 100)}%
              </Text>
            </View>
            <ProgressBar
              progress={lesson.progress}
              color={lesson.isPremium ? '#FFD700' : colors.primary}
              style={styles.progressBar}
            />
          </View>

          <View style={styles.buttonContainer}>
            {lesson.isSpecialLesson && !isSpecialSavingLesson ? (
              lesson.progress === 1 ? (
                <Button 
                  mode="contained"
                  style={[styles.actionButton, styles.completedButton]}
                  labelStyle={styles.buttonLabel}
                  disabled={true}
                >
                  Завършен урок
                </Button>
              ) : (
                <Button 
                  mode="contained"
                  style={[
                    styles.actionButton,
                    lesson.isPremium && styles.premiumButton
                  ]}
                  labelStyle={styles.buttonLabel}
                  onPress={() => navigation.navigate('Lesson', { 
                    lessonId: lesson.id,
                    topic: lesson.title,
                    description: lesson.description,
                    topics: lesson.topics,
                    isSpecialLesson: lesson.isSpecialLesson
                  })}
                >
                  Започни урок
                </Button>
              )
            ) : (
              <Button 
                mode="contained"
                style={[
                  styles.actionButton,
                  lesson.isPremium && styles.premiumButton
                ]}
                labelStyle={styles.buttonLabel}
                onPress={() => navigation.navigate('Lesson', { 
                  lessonId: lesson.id,
                  topic: lesson.title,
                  description: lesson.description,
                  topics: lesson.topics,
                  isSpecialLesson: lesson.isSpecialLesson
                })}
              >
                Започни урок
              </Button>
            )}
          </View>
        </Surface>
      </Animated.View>
    );
  };

  const renderSkeletonLoader = () => (
    <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
      {/* User Stats Skeleton */}
      <Surface style={[styles.userStatsContainer, styles.skeletonContainer]}>
        <View style={styles.skeletonUserInfo}>
          <View style={[styles.skeletonCircle, { width: 60, height: 60, borderRadius: 30 }]} />
          <View style={styles.skeletonTextContainer}>
            <View style={[styles.skeletonText, { width: 150, height: 24 }]} />
            <View style={[styles.skeletonText, { width: 100, height: 16, marginTop: 8 }]} />
          </View>
        </View>
        <View style={styles.skeletonStats}>
          <View style={styles.skeletonStatItem}>
            <View style={[styles.skeletonCircle, { width: 32, height: 32 }]} />
            <View style={[styles.skeletonText, { width: 40, height: 20, marginTop: 4 }]} />
          </View>
          <View style={styles.skeletonStatItem}>
            <View style={[styles.skeletonCircle, { width: 32, height: 32 }]} />
            <View style={[styles.skeletonText, { width: 40, height: 20, marginTop: 4 }]} />
          </View>
        </View>
      </Surface>

      {/* Progress Skeleton */}
      <Surface style={[styles.progressSection, styles.skeletonContainer]}>
        <View style={[styles.skeletonText, { width: 120, height: 20, marginBottom: 16 }]} />
        <View style={[styles.skeletonText, { width: '100%', height: 8, borderRadius: 4 }]} />
        <View style={[styles.skeletonText, { width: 100, height: 16, marginTop: 8 }]} />
      </Surface>

      {/* Lessons Skeleton */}
      {[1, 2, 3].map((_, index) => (
        <Surface key={index} style={[styles.lessonCard, styles.skeletonContainer]}>
          <View style={styles.skeletonLessonHeader}>
            <View style={[styles.skeletonCircle, { width: 40, height: 40 }]} />
            <View style={styles.skeletonLessonInfo}>
              <View style={[styles.skeletonText, { width: 200, height: 20 }]} />
              <View style={[styles.skeletonText, { width: 250, height: 16, marginTop: 8 }]} />
            </View>
          </View>
          <View style={styles.skeletonProgress}>
            <View style={[styles.skeletonText, { width: '100%', height: 4, borderRadius: 2 }]} />
            <View style={[styles.skeletonText, { width: 80, height: 16, marginTop: 8 }]} />
          </View>
          <View style={styles.skeletonButtons}>
            <View style={[styles.skeletonButton, { width: 100, height: 36 }]} />
            <View style={[styles.skeletonButton, { width: 100, height: 36 }]} />
          </View>
        </Surface>
      ))}
    </Animated.View>
  );

  if (loading) {
    return (
      <View style={styles.mainContainer}>
        <Animated.ScrollView 
          style={styles.container}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {renderSkeletonLoader()}
        </Animated.ScrollView>
        <BottomNavigationBar 
          navigation={navigation}
          activeTab={activeTab}
        />
      </View>
    );
  }

  if (error) {
    return (
      <View style={[styles.mainContainer, styles.centered]}>
        <Text style={styles.errorText}>{error}</Text>
        <Button mode="contained" onPress={loadUserData} style={{ marginTop: 16 }}>
          Retry
        </Button>
      </View>
    );
  }

  return (
    <View style={styles.mainContainer}>
      <Animated.ScrollView 
        style={styles.container}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
        onScroll={Animated.event(
          [{ nativeEvent: { contentOffset: { y: scrollY } } }],
          { useNativeDriver: true }
        )}
        scrollEventThrottle={16}
      >
        {renderHeroSection()}
        
        <Surface style={styles.challengesSection}>
          <LinearGradient
            colors={['#4A5AE8', '#3A4AD8']}
            style={styles.challengesContent}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
          >
            <View style={styles.challengesInnerContent}>
              <View style={styles.challengesHeader}>
                <View style={styles.challengesIconContainer}>
                  <MaterialCommunityIcons name="flag-checkered" size={24} color="#FF6B6B" />
                </View>
                <Text style={styles.challengesTitle}>Ежедневни предизвикателства</Text>
              </View>
              <Text style={styles.challengesDescription}>
                Участвайте в ежедневни предизвикателства и печелете допълнителни точки
              </Text>
              <TouchableOpacity 
                style={styles.challengesButton}
                onPress={() => navigation.navigate('Challenges')}
                activeOpacity={0.8}
              >
                <View style={styles.challengesButtonInner}>
                  <Text style={styles.challengesButtonText}>Започнете сега</Text>
                  <MaterialCommunityIcons name="arrow-right" size={20} color="#FFFFFF" />
                </View>
              </TouchableOpacity>
            </View>
          </LinearGradient>
        </Surface>

        <View style={styles.lessonsSection}>
          <Text style={styles.sectionTitle}>
            Финансово образование
          </Text>
          <Text style={styles.sectionSubtitle}>
            Изберете урок, който искате да изучавате
          </Text>
          
          {lessons.map((lesson, index) => (
            <Animated.View
              key={lesson.id}
              style={{
                opacity: fadeAnim,
                transform: [{
                  translateY: fadeAnim.interpolate({
                    inputRange: [0, 1],
                    outputRange: [50, 0]
                  })
                }]
              }}
            >
              {renderLessonCard(lesson)}
            </Animated.View>
          ))}
        </View>
      </Animated.ScrollView>

      <BottomNavigationBar 
        navigation={navigation}
        activeTab={activeTab}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  mainContainer: {
    flex: 1,
    backgroundColor: '#F8F9FE',
  },
  container: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 100,
  },
  heroContainer: {
    height: 200, // Adjusted to account for all content + padding
    marginBottom: 24,
    overflow: 'hidden', // Ensure content doesn't overflow
  },
  heroGradient: {
    flex: 1,
    borderBottomLeftRadius: 32,
    borderBottomRightRadius: 32,
    padding: 16,
  },
  heroContent: {
    flex: 1,
    justifyContent: 'space-between',
    minHeight: 0, // Important: allows content to shrink within flex container
  },
  welcomeContainer: {
    marginBottom: 12, // Reduced to fit better
  },
  welcomeText: {
    fontSize: 24, // Slightly reduced
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 4,
    textShadowColor: 'rgba(0, 0, 0, 0.1)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  welcomeSubtext: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.9)',
    textShadowColor: 'rgba(0, 0, 0, 0.1)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  statsContainer: {
    gap: 8,
    width: '100%',
    paddingTop: 4,
  },
  statsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
    width: '100%',
  },
  statPill: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.12)',
    padding: 10,
    borderRadius: 16,
    gap: 8,
    height: 40,
    flex: 1,
  },
  streakPill: {
    backgroundColor: 'rgba(255, 107, 107, 0.12)',
  },
  statTextContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    flex: 1,
  },
  statValue: {
    fontSize: 16,
    fontFamily: 'System',
    fontWeight: '500',
    color: '#FFFFFF',
  },
  statLabel: {
    fontSize: 13,
    fontFamily: 'System',
    fontWeight: '500',
    color: 'rgba(255, 255, 255, 0.9)',
    textTransform: 'uppercase',
    letterSpacing: 0.3,
  },
  lessonsSection: {
    padding: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1A1A1A',
    marginBottom: 8,
  },
  sectionSubtitle: {
    fontSize: 16,
    color: '#666666',
    marginBottom: 24,
  },
  lessonCardContainer: {
    marginBottom: 16,
  },
  lessonCard: {
    borderRadius: 16,
    padding: 20,
    backgroundColor: '#FFFFFF',
  },
  lessonHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  iconContainer: {
    width: 48,
    height: 48,
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  lessonTitleContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  lessonTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1A1A1A',
    flex: 1,
  },
  premiumBadge: {
    backgroundColor: '#FFD700',
    color: '#000000',
    fontSize: 12,
    paddingHorizontal: 8,
  },
  lessonDescription: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
    marginBottom: 20,
  },
  progressSection: {
    marginBottom: 20,
  },
  progressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  progressLabel: {
    fontSize: 14,
    color: '#666666',
  },
  progressPercentage: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1A1A1A',
  },
  progressBar: {
    height: 8,
    borderRadius: 4,
    backgroundColor: 'rgba(0, 0, 0, 0.05)',
  },
  buttonContainer: {
    width: '100%',
  },
  actionButton: {
    width: '100%',
    borderRadius: 12,
    height: 48,
    justifyContent: 'center',
  },
  buttonLabel: {
    fontSize: 14,
    fontWeight: '600',
  },
  premiumButton: {
    backgroundColor: '#FFD700',
  },
  centered: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorText: {
    color: 'red',
    textAlign: 'center',
    marginHorizontal: 20,
  },
  userStatsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderRadius: 12,
    marginBottom: 20,
  },
  skeletonContainer: {
    backgroundColor: '#f5f5f5',
    overflow: 'hidden',
  },
  skeletonUserInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  skeletonTextContainer: {
    marginLeft: 16,
    flex: 1,
  },
  skeletonStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    borderTopWidth: 1,
    borderTopColor: 'rgba(0, 0, 0, 0.1)',
    paddingTop: 16,
  },
  skeletonStatItem: {
    alignItems: 'center',
  },
  skeletonCircle: {
    backgroundColor: '#e0e0e0',
    borderRadius: 16,
  },
  skeletonText: {
    backgroundColor: '#e0e0e0',
    borderRadius: 4,
  },
  skeletonLessonHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  skeletonLessonInfo: {
    flex: 1,
    marginLeft: 12,
  },
  skeletonProgress: {
    marginBottom: 16,
  },
  skeletonButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  skeletonButton: {
    backgroundColor: '#e0e0e0',
    borderRadius: 12,
    height: 36,
    flex: 1,
  },
  challengesSection: {
    marginHorizontal: 24,
    marginBottom: 24,
    borderRadius: 20,
    backgroundColor: '#FFFFFF',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    overflow: 'hidden',
  },
  challengesContent: {
    width: '100%',
  },
  challengesInnerContent: {
    padding: 24,
    height: '100%',
  },
  challengesHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
    gap: 12,
  },
  challengesIconContainer: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)',
  },
  challengesTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
    textShadowColor: 'rgba(0, 0, 0, 0.1)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  challengesDescription: {
    fontSize: 15,
    color: 'rgba(255, 255, 255, 0.95)',
    marginBottom: 24,
    lineHeight: 22,
  },
  challengesButton: {
    backgroundColor: '#FF6B6B',
    borderRadius: 16,
    height: 48,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 4,
    overflow: 'hidden',
  },
  challengesButtonInner: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  challengesButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    letterSpacing: 0.3,
  },
  completedButton: {
    backgroundColor: '#4CAF50',
    opacity: 0.8,
  },
  completeButton: {
    backgroundColor: '#4CAF50',
  },
});

export default HomeScreen; 